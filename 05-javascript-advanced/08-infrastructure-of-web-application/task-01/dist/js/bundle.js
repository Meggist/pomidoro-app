class Storage{static LOCAL_STORAGE=localStorage;static SESSION_STORAGE=sessionStorage;static _IDB_CONNECTION=window.indexedDB.open("storage",4)}const storage=new Storage,runCallback=(e,r)=>{e&&e(r)};storage.save=(o,S,e,s)=>{if(!o)throw new Error("key is necessary parameter");if(!S)throw new Error("value is necessary parameter");if(e===Storage.INDEXED_DB&&"function"!=typeof s)throw new Error("if storageType is INDEXED_DB, last parameter should be function");e===Storage.INDEXED_DB&&(Storage._IDB_CONNECTION.onupgradeneeded=({target:e})=>{const r=e.result,t=r.createObjectStore("customers",{keyPath:"key"});t.createIndex("key","key",{unique:!0}),t.add({value:S,key:o})},Storage._IDB_CONNECTION.onsuccess=({target:e})=>{const r=e.result;let t=r.transaction(["customers"],"readwrite"),a=t.objectStore("customers");a.add({value:S,key:o}),s()}),e!==Storage.LOCAL_STORAGE&&e||(Storage.LOCAL_STORAGE.setItem(o,S),runCallback(s,S)),e===Storage.SESSION_STORAGE&&(Storage.SESSION_STORAGE.setItem(o,S),runCallback(s,S))},storage.get=(r,e,t)=>{if(!r)throw new Error("key is necessary parameter");let a;if(e===Storage.LOCAL_STORAGE||!e)return a=Storage.LOCAL_STORAGE.getItem(r),runCallback(t,a),a;if(e===Storage.SESSION_STORAGE)return a=Storage.SESSION_STORAGE.getItem(r),runCallback(t,a),a;if(e===Storage.INDEXED_DB&&"function"!=typeof t)throw new Error("callback is required");if(e===Storage.INDEXED_DB){let e=Storage._IDB_CONNECTION.get(r);e.onsuccess=e=>{runCallback(t,e.target.result)}}},storage.getAll=(e,r)=>{let t;if(e===Storage.LOCAL_STORAGE)return t=Object.entries(Storage.LOCAL_STORAGE),runCallback(r,t),t;if(e===Storage.SESSION_STORAGE)return t=Object.entries(Storage.SESSION_STORAGE),runCallback(r,t),t;if(e===Storage.INDEXED_DB&&"function"!=typeof r)throw new Error("callback is required");if(e===Storage.INDEXED_DB){let e=Storage._IDB_CONNECTION.getAll();e.onsuccess=e=>{runCallback(r,e.target.result)}}return e?void 0:(t=Object.entries(Storage.LOCAL_STORAGE),runCallback(r,t),t)};